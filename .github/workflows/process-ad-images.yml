name: Process Weekly Ad Images

on:
  push:
    paths:
      - 'uploads/**/*.zip'
  workflow_dispatch:

jobs:
  process-images:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Find latest zip file
        id: find-zip
        run: |
          ZIP_FILE=$(find uploads -name "*.zip" -type f -printf '%T@ %p\n' | sort -rn | head -1 | cut -d' ' -f2)
          echo "zip_file=$ZIP_FILE" >> $GITHUB_OUTPUT
          echo "Found zip file: $ZIP_FILE"

          # Extract date from filename (format: YYYYMMDD_*.zip)
          FILENAME=$(basename "$ZIP_FILE")
          AD_DATE=$(echo "$FILENAME" | grep -oE '^[0-9]{8}')

          if [ -z "$AD_DATE" ]; then
            echo "ERROR: Could not extract date from filename: $FILENAME"
            echo "Expected format: YYYYMMDD_*.zip (e.g., 20251009_weekly_ad.zip)"
            exit 1
          fi

          # Convert YYYYMMDD to YYYY-MM-DD for folder name
          FOLDER_DATE="${AD_DATE:0:4}-${AD_DATE:4:2}-${AD_DATE:6:2}"
          echo "ad_date=$FOLDER_DATE" >> $GITHUB_OUTPUT
          echo "Extracted ad date: $FOLDER_DATE (from $FILENAME)"

      - name: Extract and rename images
        run: |
          ZIP_FILE="${{ steps.find-zip.outputs.zip_file }}"
          AD_DATE="${{ steps.find-zip.outputs.ad_date }}"

          # Create temp directory
          mkdir -p temp_extract

          # Extract zip file
          unzip "$ZIP_FILE" -d temp_extract

          # Create dated folder for this ad
          AD_FOLDER="public/ads/$AD_DATE"
          mkdir -p "$AD_FOLDER"

          # Find and rename BASE images to dated folder
          find temp_extract -type f -name "*BASE_1.jpg" -exec cp {} "$AD_FOLDER/page1.jpg" \;
          find temp_extract -type f -name "*BASE_2.jpg" -exec cp {} "$AD_FOLDER/page2.jpg" \;
          find temp_extract -type f -name "*BASE_3.jpg" -exec cp {} "$AD_FOLDER/page3.jpg" \;
          find temp_extract -type f -name "*BASE_4.jpg" -exec cp {} "$AD_FOLDER/page4.jpg" \;

          # Also handle uppercase .JPG extension
          find temp_extract -type f -name "*BASE_1.JPG" -exec cp {} "$AD_FOLDER/page1.jpg" \;
          find temp_extract -type f -name "*BASE_2.JPG" -exec cp {} "$AD_FOLDER/page2.jpg" \;
          find temp_extract -type f -name "*BASE_3.JPG" -exec cp {} "$AD_FOLDER/page3.jpg" \;
          find temp_extract -type f -name "*BASE_4.JPG" -exec cp {} "$AD_FOLDER/page4.jpg" \;

          # Clean up
          rm -rf temp_extract
          rm "$ZIP_FILE"

          # Verify images were created
          echo "âœ“ Created ad folder: $AD_FOLDER"
          echo "Images in $AD_FOLDER:"
          ls -lh "$AD_FOLDER/"

          echo ""
          echo "All available ad weeks:"
          ls -la public/ads/ | grep "^d" | grep -E "[0-9]{4}-[0-9]{2}-[0-9]{2}"

      - name: Commit and push changes
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

          git add public/ads/
          git add uploads/

          # Check if there are changes to commit
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "ðŸ”„ Update weekly ad images [automated]"
            git push
          fi
