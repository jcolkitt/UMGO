name: Process Weekly Ad Images

on:
  push:
    branches: [ main ]            # make sure this matches your default branch
    paths:
      - 'uploads/**/*.zip'
  workflow_dispatch:

permissions:
  contents: write                 # <-- REQUIRED so the job can commit/push

jobs:
  process-images:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}   # default; explicit for clarity

      - name: Ensure unzip is available
        run: |
          sudo apt-get update
          sudo apt-get install -y unzip

      - name: Find latest zip file
        id: find-zip
        shell: bash
        run: |
          set -euo pipefail
          ZIP_FILE=$(find uploads -name "*.zip" -type f -printf '%T@ %p\n' | sort -rn | head -1 | cut -d' ' -f2 || true)
          if [ -z "${ZIP_FILE:-}" ]; then
            echo "No zip found in uploads/. Exiting."
            exit 0
          fi
          echo "zip_file=$ZIP_FILE" >> $GITHUB_OUTPUT
          echo "Found zip file: $ZIP_FILE"

          FILENAME=$(basename "$ZIP_FILE")
          AD_DATE=$(echo "$FILENAME" | grep -oE '^[0-9]{8}' || true)
          if [ -z "$AD_DATE" ]; then
            echo "::error::Could not extract date from filename: $FILENAME"
            echo "Expected: YYYYMMDD_*.zip (e.g., 20251009_weekly_ad.zip)"
            exit 1
          fi

          FOLDER_DATE="${AD_DATE:0:4}-${AD_DATE:4:2}-${AD_DATE:6:2}"
          echo "ad_date=$FOLDER_DATE" >> $GITHUB_OUTPUT
          echo "Extracted ad date: $FOLDER_DATE (from $FILENAME)"

      - name: Extract and rename images
        if: steps.find-zip.outputs.zip_file != ''
        shell: bash
        run: |
          set -euo pipefail
          ZIP_FILE="${{ steps.find-zip.outputs.zip_file }}"
          AD_DATE="${{ steps.find-zip.outputs.ad_date }}"

          mkdir -p temp_extract
          unzip -j "$ZIP_FILE" -d temp_extract

          AD_FOLDER="public/ads/$AD_DATE"
          mkdir -p "$AD_FOLDER"

          # copy BASE_1..4 (jpg/jpeg, any case) to page1..4.jpg
          found_any=false
          for i in 1 2 3 4; do
            # find first matching file for index i
            FILE=$(find temp_extract -maxdepth 1 -type f \
              \( -iname "*BASE_${i}.jpg" -o -iname "*BASE_${i}.jpeg" \) \
              | head -n 1 || true)
            if [ -z "${FILE:-}" ]; then
              echo "::error::Missing *_BASE_${i}.jpg in $ZIP_FILE"
              exit 1
            fi
            cp -f "$FILE" "$AD_FOLDER/page${i}.jpg"
            found_any=true
          done

          # Update 'current' to point at this week (optional mirror)
          mkdir -p public/ads/current
          cp -f "$AD_FOLDER/page"*.jpg public/ads/current/

          # Remove the uploaded zip from the repo (stage deletion)
          git rm -f "$ZIP_FILE"

          # Clean temp
          rm -rf temp_extract

          echo "âœ“ Created/updated: $AD_FOLDER"
          ls -lh "$AD_FOLDER" || true

      - name: Commit and push changes
        if: steps.find-zip.outputs.zip_file != ''
        shell: bash
        run: |
          set -e
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add -A
          if git diff --cached --quiet; then
            echo "No changes to commit"
            exit 0
          fi
          git commit -m "ðŸ”„ Update weekly ad images for ${{ steps.find-zip.outputs.ad_date }} [automated]"
          # push back to the same branch that triggered the workflow
          git push origin HEAD:${{ github.ref_name }}
